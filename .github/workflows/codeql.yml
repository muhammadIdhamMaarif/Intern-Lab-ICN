name: "CodeQL — Angular (TS) + Rails + Go Terratest + Python"

on:
  push:
    branches: [ "main", "release/**" ]
    # Trigger on code that matters for these languages; ignore pure IaC/docs changes
    paths:
      - "apps/**"
      - "services/**"
      - "frontend/**"
      - "backend/**"
      - "lib/**"
      - "scripts/**"
      - "tests/**"
      - "toolchain/**"
      - "Gemfile*"
      - "**/Gemfile*"
      - "package.json"
      - "package-lock.json"
      - "pnpm-lock.yaml"
      - "yarn.lock"
      - "**/package.json"
      - "**/package-lock.json"
      - "**/pnpm-lock.yaml"
      - "**/yarn.lock"
      - "go.mod"
      - "**/go.mod"
      - "requirements.txt"
      - "**/requirements.txt"
      - ".github/workflows/**"
  pull_request:
    branches: [ "**" ]
    paths:
      - "apps/**"
      - "services/**"
      - "frontend/**"
      - "backend/**"
      - "lib/**"
      - "scripts/**"
      - "tests/**"
      - "toolchain/**"
      - "Gemfile*"
      - "**/Gemfile*"
      - "package.json"
      - "package-lock.json"
      - "pnpm-lock.yaml"
      - "yarn.lock"
      - "**/package.json"
      - "**/package-lock.json"
      - "**/pnpm-lock.yaml"
      - "**/yarn.lock"
      - "go.mod"
      - "**/go.mod"
      - "requirements.txt"
      - "**/requirements.txt"
      - ".github/workflows/**"
  schedule:
    # Weekly full sweep (02:00 UTC Monday)
    - cron: "0 2 * * 1"
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

# Avoid duplicate runs on the same ref/language; safe for monorepo
concurrency:
  group: "codeql-${{ github.ref }}-${{ github.workflow }}-${{ matrix.language }}"
  cancel-in-progress: false

jobs:
  codeql:
    if: ${{ github.event.repository.fork == false }}
    runs-on: ubuntu-latest
    timeout-minutes: 90

    strategy:
      fail-fast: false
      matrix:
        # ONLY stacks used in your design
        language: [ "javascript", "ruby", "go", "python" ]

    env:
      # Tune for larger repos/richer query packs
      CODEQL_ACTION_THREADS: "4"
      CODEQL_ACTION_RAM: "12288"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- Per-language toolchains (monorepo-aware) ----------
      - name: Setup Node (for Angular / TS)
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Setup Ruby (for Rails)
        if: matrix.language == 'ruby'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler: "latest"

      - name: Setup Go (for Terratest)
        if: matrix.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          check-latest: true
          cache: true

      - name: Setup Python (utility scripts)
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt

      # ---------- CodeQL init (manual build to control monorepo behavior) ----------
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: manual
          queries: |
            +security-extended
            +security-and-quality
          config-file: .github/codeql/codeql-config.yml

      # ---------- Monorepo-friendly dependency/bootstrap steps ----------
      # JavaScript/TypeScript — prefer workspaces if present; otherwise fall back.
      - name: JS/TS — install & attempt Angular builds (best-effort)
        if: matrix.language == 'javascript'
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pnpm-lock.yaml ]; then
            corepack enable || true
            pnpm -v || corepack prepare pnpm@latest --activate
            pnpm -r install --frozen-lockfile
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --ignore-scripts
          else
            # Multi-package support
            mapfile -t PKGS < <(git ls-files '**/package.json' ':!:**/node_modules/**')
            for p in "${PKGS[@]}"; do
              d="$(dirname "$p")"
              echo "::group::npm ci in $d"
              (cd "$d" && npm ci --ignore-scripts || true)
              echo "::endgroup::"
            done
          fi

          # Try to build Angular apps if present (won't fail the job if none)
          (npm i -g @angular/cli@latest && ng version >/dev/null 2>&1) || true
          mapfile -t ANGULAR_JSONS < <(git ls-files '**/angular.json')
          for a in "${ANGULAR_JSONS[@]:-}"; do
            d="$(dirname "$a")"
            echo "::group::ng build in $d"
            (cd "$d" && npx ng build --configuration=production --output-hashing=all || true)
            echo "::endgroup::"
          done

      # Ruby — install gems across any nested Rails apps (best-effort)
      - name: Ruby — bundle install (monorepo)
        if: matrix.language == 'ruby'
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob globstar
          for g in Gemfile **/Gemfile; do
            d="$(dirname "$g")"
            echo "::group::bundle install in $d"
            (cd "$d" && bundle config set path 'vendor/bundle' && bundle install --jobs 4 --retry 3) || true
            echo "::endgroup::"
          done

      # Go — build packages so CodeQL can observe compilation
      - name: Go — build packages
        if: matrix.language == 'go'
        shell: bash
        env:
          CGO_ENABLED: "0"
        run: |
          set -euo pipefail
          if [ -f go.work ]; then
            echo "Detected go.work; ensuring modules present"
            go work sync || true
          fi
          mapfile -t MODS < <(git ls-files '**/go.mod')
          if [ "${#MODS[@]}" -eq 0 ]; then
            echo "No go.mod files found; skipping Go build."
          else
            for m in "${MODS[@]}"; do
              d="$(dirname "$m")"
              echo "::group::go build ./... in $d"
              (cd "$d" && go mod download && go build ./... || true)
              echo "::endgroup::"
            done
          fi

      # Python — install requirements if present (not strictly required for CodeQL)
      - name: Python — install requirements (best-effort)
        if: matrix.language == 'python'
        shell: bash
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt || true
          fi
          mapfile -t REQ < <(git ls-files '**/requirements.txt')
          for r in "${REQ[@]:-}"; do
            d="$(dirname "$r")"
            echo "::group::pip install in $d"
            (cd "$d" && pip install -r requirements.txt || true)
            echo "::endgroup::"
          done

      # ---------- Analyze & upload ----------
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/monorepo-${{ matrix.language }}"
          upload: "always"
